#!/usr/bin/perl -w
use warnings;
use strict;

use File::Basename;
use File::Find;
use List::MoreUtils qw(all any);

my $SECTION_SEPARATOR = ' - ';
my $SERIES_EPISODE = 'S([0-9]+)E([0-9]+)([a-z]*)';
my $SERIES_EPISODE_EXTENDED = 'S([0-9]{2})E([0-9]{2})([a-z]?)';
my $EP_NAME_VALID = '[a-zA-Z0-9 ,\\\-]';
my $EP_NAME_CASE = [qw(
	a and if in is or the
)];
my $TAG_MATCH = '(?:\[([^]]+)\])';
my $TAGS = [qw(
	240p 288p 480p 720p 1080p
	HDTV DVDRip BDRip
)];
my $TAGS_SYNONYMS = {
	BDRip => [qw(BRRip BluRay)],
};
my $RIPPERS = [qw(
	2HD AFG DIMENSION EVOLVE FoV FQM HANNiBAL IMMERSE
	Indi LOL MOMENTUM NPFS m00tv ORENJI SYS TLA TSV
)];
my $FILE_EXT = '\.([a-z0-9]+)';

my $ALL_TAGS = [
	@$TAGS,
	map { @{$TAGS_SYNONYMS->{$_}} } keys %$TAGS_SYNONYMS
];

use constant CASE_NO_MATCH   => 0;
use constant CASE_BAD_MATCH  => 1;
use constant CASE_FULL_MATCH => 2;

my $type = shift @ARGV;
foreach (@ARGV) {
	$_ .= '/' unless (m{/$});
}

sub check_case {
	my ($string, $match) = @_;
	my $i_match = $string =~ /$match/i;
	return CASE_NO_MATCH unless $i_match;
	my $c_match = $string =~ /$match/;
	return $c_match ?
		CASE_BAD_MATCH :
		CASE_FULL_MATCH;
}

my $error_last_dir;
sub print_error {
	my ($message) = @_;
	if (!defined $error_last_dir || $File::Find::dir ne $error_last_dir) {
		printf "\n--- Issues in directory %s ---\n",
			$File::Find::dir;
		$error_last_dir = $File::Find::dir;
	}
	printf "$message: %s\n", basename($File::Find::name);
}
find(sub {
	return 0 unless -f $_;

	s/$FILE_EXT$//;
	my ($series, $name, $tags, $ripper, $more) =
		split(/$SECTION_SEPARATOR/, $_);
	my $required_okay = all { defined } ($series, $name);
	if (!$required_okay || defined $more) {
		print_error "Incorrect number of parts";
		return 1;
	}

	if (not $series =~ /$SERIES_EPISODE$/i) {
		print_error "Could not find series/episode";
		return 1;
	}
	if (not $series =~ /^$SERIES_EPISODE$/i) {
		print_error "Series/episode not at start";
		return 1;
	}
	if (not $series =~ /^$SERIES_EPISODE$/) {
		print_error "Invalid case for series/episode";
		return 1;
	}
	if (not $series =~ /^$SERIES_EPISODE_EXTENDED$/) {
		print_error "Too many digits in series/episode";
		return 1;
	}

	if (not $name =~ /^$EP_NAME_VALID+$/) {
		print_error "Episode name contains invalid characters";
		return 1;
	}
	foreach my $word (@$EP_NAME_CASE) {
		if (check_case($name, " $word ") == CASE_BAD_MATCH) {
			print_error "Invalid case for $word";
			return 1;
		}
	}

	if (not $tags =~ /^$TAG_MATCH*$/) {
		print_error "Tags list is invalid";
		return 1;
	}

	my @tags_list = $tags =~ /$TAG_MATCH/g;
	if (@tags_list) {
		foreach my $tag (@$TAGS) {
			if (defined $tags_list[0] && $tags_list[0] eq $tag) {
				shift @tags_list;
			}
		}
		foreach my $tag (@tags_list) {
			if (any { $_ eq $tag } @$TAGS) {
				print_error "Incorrect order of tags, starting at $tag";
				return 1;
			}
		}
		if (@tags_list) {
			foreach my $tag (@tags_list) {
				$tag = "[$tag]";
				foreach my $real_tag (keys %$TAGS_SYNONYMS) {
					foreach my $synonym (@{$TAGS_SYNONYMS->{$real_tag}}) {
						if ($tag =~ /$synonym/i) {
							$tag .= "->[$real_tag]";
						}
					}
				}
			}
			print_error 'Invalid tag(s) ' . join(', ', @tags_list);
			return 1;
		}
	} elsif (defined $tags && $tags ne '') {
		print_error "Unknown tags format";
		return 1;
	}

	if (defined $ripper) {

	}

}, @ARGV);
